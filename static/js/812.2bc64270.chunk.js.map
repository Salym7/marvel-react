{"version":3,"file":"static/js/812.2bc64270.chunk.js","mappings":"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","sources":["components/errorMessage/ErrorMessage.js","components/errorBoundary/ErrorBoundary.js","components/randomChar/RandomChar.js","components/charList/CharList.js","components/charInfo/CharInfo.js","components/charSearchForm/CharSearchForm.js","components/pages/MainPage.js","services/MarvelService.js","hooks/http.hook.js","components/skeleton/Skeleton.js","utils/setContent.js"],"sourcesContent":["import img from './error.gif';\r\n\r\nconst ErrorMessage = () => {\r\n    return (\r\n        <img style={{ display: 'block', width: \"250px\", height: \"250px\",objectFit: 'contain', margin: \"0 auto\"}}  src={img} alt=\"Error\"/>\r\n    )\r\n}\r\n\r\nexport default ErrorMessage;","import { Component } from \"react\";\r\nimport ErrorMessage from \"../errorMessage/ErrorMessage\";\r\n\r\nclass ErrorBoundary extends Component {\r\n    state = {\r\n        error: false,\r\n    };\r\n\r\n    componentDidCatch(error, errorInfo) {\r\n        console.log(error, errorInfo);\r\n        this.setState({\r\n            error: true,\r\n        });\r\n    }\r\n\r\n    render() {\r\n        if (this.state.error) {\r\n            return <ErrorMessage />;\r\n        }\r\n\r\n        return this.props.children;\r\n    }\r\n}\r\n\r\nexport default ErrorBoundary;\r\n","import {useState, useEffect} from 'react';\nimport useMarvelService from '../../services/MarvelService';\nimport setContent from '../../utils/setContent';\n\nimport './randomChar.scss';\nimport mjolnir from '../../resources/img/mjolnir.png';\n\nconst RandomChar = () => {\n\n    const [char, setChar] = useState(null);\n    const {getCharacter, clearError, process, setProcess} = useMarvelService();\n\n    useEffect(() => {\n        updateChar();\n        const timerId = setInterval(updateChar, 60000);\n\n        return () => {\n            clearInterval(timerId)\n        }\n    }, [])\n\n    const onCharLoaded = (char) => {\n        setChar(char);\n    }\n\n    const updateChar = () => {\n        clearError();\n        const id = Math.floor(Math.random() * (1011400 - 1011000)) + 1011000;\n        getCharacter(id)\n            .then(onCharLoaded).then(() => setProcess('confirmed'));\n    }\n\n    return (\n        <div className=\"randomchar\">\n            {setContent(process, View, char)}\n            <div className=\"randomchar__static\">\n                <p className=\"randomchar__title\">\n                    Random character for today!<br/>\n                    Do you want to get to know him better?\n                </p>\n                <p className=\"randomchar__title\">\n                    Or choose another one\n                </p>\n                <button onClick={updateChar} className=\"button button__main\">\n                    <div className=\"inner\">try it</div>\n                </button>\n                <img src={mjolnir} alt=\"mjolnir\" className=\"randomchar__decoration\"/>\n            </div>\n        </div>\n    )\n}\n\nconst View = ({data}) => {\n    const {name, description, thumbnail, homepage, wiki} = data;\n    let imgStyle = {'objectFit' : 'cover'};\n    if (thumbnail === 'http://i.annihil.us/u/prod/marvel/i/mg/b/40/image_not_available.jpg') {\n        imgStyle = {'objectFit' : 'contain'};\n    }\n\n    return (\n        <div className=\"randomchar__block\">\n            <img src={thumbnail} alt=\"Random character\" className=\"randomchar__img\" style={imgStyle}/>\n            <div className=\"randomchar__info\">\n                <p className=\"randomchar__name\">{name}</p>\n                <p className=\"randomchar__descr\">\n                    {description}\n                </p>\n                <div className=\"randomchar__btns\">\n                    <a href={homepage} className=\"button button__main\">\n                        <div className=\"inner\">homepage</div>\n                    </a>\n                    <a href={wiki} className=\"button button__secondary\">\n                        <div className=\"inner\">Wiki</div>\n                    </a>\n                </div>\n            </div>\n        </div>\n    )\n}\n\nexport default RandomChar;","import { useState, useEffect, useRef, useMemo } from \"react\";\nimport PropTypes from \"prop-types\";\n\nimport Spinner from \"../spinner/Spinner\";\nimport ErrorMessage from \"../errorMessage/ErrorMessage\";\nimport useMarvelService from \"../../services/MarvelService\";\nimport \"./charList.scss\";\n\nconst setContent = (process, Component, newItemLoading) => {\n    switch (process) {\n        case \"waiting\":\n            return <Spinner />;\n        case \"loading\":\n            return newItemLoading ? <Component /> : <Spinner />;\n        case \"confirmed\":\n            return <Component />;\n        case \"error\":\n            return <ErrorMessage />;\n        default:\n            throw new Error(\"Unexpected process state\");\n    }\n};\n\nconst CharList = (props) => {\n    const [charList, setCharList] = useState([]);\n    const [newItemLoading, setNewItemLoading] = useState(false);\n    const [offset, setOffset] = useState(210);\n    const [charEnded, setCharEnded] = useState(false);\n\n    const { getAllCharacters, process, setProcess } = useMarvelService();\n\n    useEffect(() => {\n        onRequest(offset, true);\n    }, []);\n\n    const onRequest = (offset, initial) => {\n        initial ? setNewItemLoading(false) : setNewItemLoading(true);\n        getAllCharacters(offset)\n            .then(onCharListLoaded)\n            .then(() => setProcess(\"confirmed\"));\n    };\n\n    const onCharListLoaded = (newCharList) => {\n        let ended = false;\n        if (newCharList.length < 9) {\n            ended = true;\n        }\n\n        setCharList((charList) => [...charList, ...newCharList]);\n        setNewItemLoading((newItemLoading) => false);\n        setOffset((offset) => offset + 9);\n        setCharEnded((charEnded) => ended);\n    };\n\n    const itemRefs = useRef([]);\n\n    const focusOnItem = (id) => {\n        itemRefs.current.forEach((item) => item.classList.remove(\"char__item_selected\"));\n        itemRefs.current[id].classList.add(\"char__item_selected\");\n        itemRefs.current[id].focus();\n    };\n\n    function renderItems(arr) {\n        const items = arr.map((item, i) => {\n            let imgStyle = { objectFit: \"cover\" };\n            if (item.thumbnail === \"http://i.annihil.us/u/prod/marvel/i/mg/b/40/image_not_available.jpg\") {\n                imgStyle = { objectFit: \"unset\" };\n            }\n\n            return (\n                <li\n                    className=\"char__item\"\n                    tabIndex={0}\n                    ref={(el) => (itemRefs.current[i] = el)}\n                    key={item.id}\n                    onClick={() => {\n                        props.onCharSelected(item.id);\n                        focusOnItem(i);\n                    }}\n                    onKeyPress={(e) => {\n                        if (e.key === \" \" || e.key === \"Enter\") {\n                            props.onCharSelected(item.id);\n                            focusOnItem(i);\n                        }\n                    }}\n                >\n                    <img src={item.thumbnail} alt={item.name} style={imgStyle} />\n                    <div className=\"char__name\">{item.name}</div>\n                </li>\n            );\n        });\n\n        return <ul className=\"char__grid\">{items}</ul>;\n    }\n\n    const elements = useMemo(() => {\n        return setContent(process, () => renderItems(charList), newItemLoading);\n        // eslint-disable-next-line\n    }, [process]);\n    return (\n        <div className=\"char__list\">\n            {elements}\n            <button\n                className=\"button button__main button__long\"\n                disabled={newItemLoading}\n                style={{ display: charEnded ? \"none\" : \"block\" }}\n                onClick={() => onRequest(offset)}\n            >\n                <div className=\"inner\">load more</div>\n            </button>\n        </div>\n    );\n};\n\nCharList.propTypes = {\n    onCharSelected: PropTypes.func.isRequired,\n};\n\nexport default CharList;\n","import {useState, useEffect} from 'react';\nimport PropTypes from 'prop-types';\n\nimport useMarvelService from '../../services/MarvelService';\nimport setContent from '../../utils/setContent';\n\nimport './charInfo.scss';\n\nconst CharInfo = (props) => {\n\n    const [char, setChar] = useState(null);\n    const {getCharacter, clearError, process, setProcess} = useMarvelService();\n\n    useEffect(() => {\n        updateChar()\n    }, [props.charId])\n\n    const updateChar = () => {\n        const {charId} = props;\n        if (!charId) {\n            return;\n        }\n\n        clearError();\n        getCharacter(charId)\n            .then(onCharLoaded)\n            .then(() => setProcess('confirmed'))\n    }\n\n    const onCharLoaded = (char) => {\n        setChar(char);\n    }\n\n\n\n    return (\n        <div className=\"char__info\">\n            {setContent(process, View, char)}\n        </div>\n    )\n}\n\nconst View = ({data}) => {\n    const {name, description, thumbnail, homepage, wiki, comics} = data;\n\n    let imgStyle = {'objectFit': 'cover'};\n    if (thumbnail === 'http://i.annihil.us/u/prod/marvel/i/mg/b/40/image_not_available.jpg') {\n        imgStyle = {'objectFit': 'contain'};\n    }\n\n    return (\n        <>\n            <div className=\"char__basics\">\n                <img src={thumbnail} alt={name} style={imgStyle}/>\n                <div>\n                    <div className=\"char__info-name\">{name}</div>\n                    <div className=\"char__btns\">\n                        <a href={homepage} className=\"button button__main\">\n                            <div className=\"inner\">homepage</div>\n                        </a>\n                        <a href={wiki} className=\"button button__secondary\">\n                            <div className=\"inner\">Wiki</div>\n                        </a>\n                    </div>\n                </div>\n            </div>\n            <div className=\"char__descr\">\n                {description}\n            </div>\n            <div className=\"char__comics\">Comics:</div>\n            <ul className=\"char__comics-list\">\n                {comics.length > 0 ? null : 'There is no comics with this character'}\n                {\n                    comics.map((item, i) => {\n                        // eslint-disable-next-line\n                        if (i > 9) return;\n                        return (\n                            <li key={i} className=\"char__comics-item\">\n                                {item.name}\n                            </li>\n                        )\n                    })\n                }\n            </ul>\n        </>\n    )\n}\n\nCharInfo.propTypes = {\n    charId: PropTypes.number\n}\n\nexport default CharInfo;","import {useState} from 'react';\r\nimport { Formik, Form, Field, ErrorMessage as FormikErrorMessage } from 'formik';\r\nimport * as Yup from 'yup';\r\nimport {Link} from 'react-router-dom';\r\n\r\nimport useMarvelService from '../../services/MarvelService';\r\nimport ErrorMessage from '../errorMessage/ErrorMessage';\r\n\r\nimport './charSearchForm.scss';\r\n\r\nconst CharSearchForm = () => {\r\n    const [char, setChar] = useState(null);\r\n    const {getCharacterByName, clearError, process, setProcess} = useMarvelService();\r\n\r\n    const onCharLoaded = (char) => {\r\n        setChar(char);\r\n    }\r\n\r\n    const updateChar = (name) => {\r\n        clearError();\r\n\r\n        getCharacterByName(name)\r\n            .then(onCharLoaded)\r\n            .then(() => setProcess('confirmed'));\r\n    }\r\n\r\n    const errorMessage = process === 'error' ? <div className=\"char__search-critical-error\"><ErrorMessage /></div> : null;\r\n    const results = !char ? null : char.length > 0 ?\r\n        <div className=\"char__search-wrapper\">\r\n            <div className=\"char__search-success\">There is! Visit {char[0].name} page?</div>\r\n            <Link to={`/characters/${char[0].id}`} className=\"button button__secondary\">\r\n                <div className=\"inner\">To page</div>\r\n            </Link>\r\n        </div> :\r\n        <div className=\"char__search-error\">\r\n            The character was not found. Check the name and try again\r\n        </div>;\r\n\r\n    return (\r\n        <div className=\"char__search-form\">\r\n            <Formik\r\n                initialValues = {{\r\n                    charName: ''\r\n                }}\r\n                validationSchema = {Yup.object({\r\n                    charName: Yup.string().required('This field is required')\r\n                })}\r\n                onSubmit = { ({charName}) => {\r\n                    updateChar(charName);\r\n                }}\r\n            >\r\n                <Form>\r\n                    <label className=\"char__search-label\" htmlFor=\"charName\">Or find a character by name:</label>\r\n                    <div className=\"char__search-wrapper\">\r\n                        <Field\r\n                            id=\"charName\"\r\n                            name='charName'\r\n                            type='text'\r\n                            placeholder=\"Enter name\"/>\r\n                        <button\r\n                            type='submit'\r\n                            className=\"button button__main\"\r\n                            disabled={process === 'loading'}>\r\n                            <div className=\"inner\">find</div>\r\n                        </button>\r\n                    </div>\r\n                    <FormikErrorMessage component=\"div\" className=\"char__search-error\" name=\"charName\" />\r\n                </Form>\r\n            </Formik>\r\n            {results}\r\n            {errorMessage}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default CharSearchForm;","import {useState} from \"react\";\r\nimport {Helmet} from \"react-helmet\";\r\n\r\nimport ErrorBoundary from \"../errorBoundary/ErrorBoundary\";\r\nimport RandomChar from \"../randomChar/RandomChar\";\r\nimport CharList from \"../charList/CharList\";\r\nimport CharInfo from \"../charInfo/CharInfo\";\r\nimport CharSearchForm from \"../charSearchForm/CharSearchForm\";\r\nimport decoration from \"../../resources/img/vision.png\";\r\n\r\n\r\nconst MainPage = () => {\r\n\r\n    const [selectedChar, setChar] = useState(null)\r\n\r\n    const onCharSelected = (id) => {\r\n        setChar(id);\r\n    }\r\n\r\n    return (<>\r\n            <Helmet>\r\n                <meta\r\n                    name=\"description\"\r\n                    content=\"Web site created using create-react-app\"\r\n                />\r\n                <title>Marvel information</title>\r\n            </Helmet>\r\n            <ErrorBoundary>\r\n                <RandomChar/>\r\n            </ErrorBoundary>\r\n            <div className=\"char__content\">\r\n                <ErrorBoundary>\r\n                    <CharList onCharSelected={onCharSelected}/>\r\n                </ErrorBoundary>\r\n                <div>\r\n                    <ErrorBoundary>\r\n                        <CharInfo charId={selectedChar}/>\r\n                    </ErrorBoundary>\r\n                    <ErrorBoundary>\r\n                        <CharSearchForm/>\r\n                    </ErrorBoundary>\r\n                </div>\r\n            </div>\r\n            <img className=\"bg-decoration\" src={decoration} alt=\"vision\"/>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default MainPage","import {useHttp} from \"../hooks/http.hook\";\r\n\r\nconst useMarvelService = () => {\r\n    const {request, clearError, process, setProcess } = useHttp();\r\n\r\n    const _apiBase = \"https://gateway.marvel.com:443/v1/public/\";\r\n    const _apiKey = \"apikey=5d66691ac3e256fab6c3e76f173abda0\";\r\n    const _baseOffset = 210;\r\n\r\n    const getAllCharacters = async (offset = _baseOffset) => {\r\n        const res = await request(\r\n            `${_apiBase}characters?limit=9&offset=${offset}&${_apiKey}`\r\n        );\r\n        return res.data.results.map(_transformCharacter);\r\n    };\r\n\r\n    const getCharacterByName = async (name) => {\r\n        const res = await request(`${_apiBase}characters?name=${name}&${_apiKey}`);\r\n        return res.data.results.map(_transformCharacter);\r\n    };\r\n\r\n    const getCharacter = async (id) => {\r\n        const res = await request(`${_apiBase}characters/${id}?${_apiKey}`);\r\n        return _transformCharacter(res.data.results[0]);\r\n    };\r\n\r\n    const getAllComics = async (offset = 0) => {\r\n        const res = await request(\r\n            `${_apiBase}comics?orderBy=issueNumber&limit=8&offset=${offset}&${_apiKey}`\r\n        );\r\n        return res.data.results.map(_transformComics);\r\n    };\r\n\r\n    const getComic = async (id) => {\r\n        const res = await request(`${_apiBase}comics/${id}?${_apiKey}`);\r\n        return _transformComics(res.data.results[0]);\r\n    };\r\n\r\n    const _transformCharacter = (char) => {\r\n        return {\r\n            id: char.id,\r\n            name: char.name,\r\n            description: char.description\r\n                ? `${char.description.slice(0, 210)}...`\r\n                : \"There is no description for this character\",\r\n            thumbnail: char.thumbnail.path + \".\" + char.thumbnail.extension,\r\n            homepage: char.urls[0].url,\r\n            wiki: char.urls[1].url,\r\n            comics: char.comics.items,\r\n        };\r\n    };\r\n\r\n    const _transformComics = (comics) => {\r\n        return {\r\n            id: comics.id,\r\n            title: comics.title,\r\n            description: comics.description || \"There is no description\",\r\n            pageCount: comics.pageCount\r\n                ? `${comics.pageCount} p.`\r\n                : \"No information about the number of pages\",\r\n            thumbnail: comics.thumbnail.path + \".\" + comics.thumbnail.extension,\r\n            language: comics.textObjects[0]?.language || \"en-us\",\r\n            // optional chaining operator\r\n            price: comics.prices[0].price\r\n                ? `${comics.prices[0].price}$`\r\n                : \"not available\",\r\n        };\r\n    };\r\n\r\n    return {\r\n        clearError,\r\n        process,\r\n        setProcess,\r\n        getAllCharacters,\r\n        getCharacterByName,\r\n        getCharacter,\r\n        getAllComics,\r\n        getComic,\r\n    };\r\n};\r\n\r\nexport default useMarvelService;\r\n","import { useState, useCallback } from \"react\";\r\n\r\nexport const useHttp = () => {\r\n    const [process, setProcess] = useState('waiting');\r\n\r\n    const request = useCallback(async (url, method = 'GET', body = null, headers = {'Content-Type': 'application/json'}) => {\r\n\r\n        setProcess('loading');\r\n\r\n        try {\r\n            const response = await fetch(url, {method, body, headers});\r\n\r\n            if (!response.ok) {\r\n               throw new Error(`Could not fetch ${url}, status: ${response.status}`);\r\n            }\r\n\r\n            const data = await response.json();\r\n\r\n            return data;\r\n        } catch(e) {\r\n            setProcess('error');\r\n            throw e;\r\n        }\r\n    }, []);\r\n\r\n    const clearError = useCallback(() => setProcess('loading'), []);\r\n\r\n    return {request, clearError, process, setProcess}\r\n}","import './skeleton.scss';\n\nconst Skeleton = () => {\n    return (\n        <>\n            <p className=\"char__select\">Please select a character to see information</p>\n            <div className=\"skeleton\">\n                <div className=\"pulse skeleton__header\">\n                    <div className=\"pulse skeleton__circle\"></div>\n                    <div className=\"pulse skeleton__mini\"></div>\n                </div>\n                <div className=\"pulse skeleton__block\"></div>\n                <div className=\"pulse skeleton__block\"></div>\n                <div className=\"pulse skeleton__block\"></div>\n            </div>\n        </>\n    )\n}\n\nexport default Skeleton;","import Spinner from '../components/spinner/Spinner';\r\nimport ErrorMessage from '../components/errorMessage/ErrorMessage';\r\nimport Skeleton from '../components/skeleton/Skeleton';\r\n\r\nconst setContent = (process, Component, data) => {\r\n    switch (process) {\r\n        case 'waiting':\r\n            return <Skeleton/>;\r\n        case 'loading':\r\n            return <Spinner/>;\r\n        case 'confirmed':\r\n            return <Component data={data}/>;\r\n        case 'error':\r\n            return <ErrorMessage/>;\r\n        default:\r\n            throw new Error('Unexpected process state');\r\n    }\r\n}\r\n\r\nexport default setContent;"],"names":["style","display","width","height","objectFit","margin","src","img","alt","ErrorBoundary","state","error","errorInfo","console","log","this","setState","ErrorMessage","props","children","Component","View","data","name","description","thumbnail","homepage","wiki","imgStyle","className","href","useState","char","setChar","useMarvelService","getCharacter","clearError","process","setProcess","useEffect","updateChar","timerId","setInterval","clearInterval","onCharLoaded","id","Math","floor","random","then","setContent","onClick","mjolnir","charList","setCharList","newItemLoading","setNewItemLoading","offset","setOffset","charEnded","setCharEnded","getAllCharacters","onRequest","initial","onCharListLoaded","newCharList","ended","length","itemRefs","useRef","focusOnItem","current","forEach","item","classList","remove","add","focus","elements","useMemo","Spinner","Error","arr","items","map","i","tabIndex","ref","el","onCharSelected","onKeyPress","e","key","renderItems","disabled","comics","charId","getCharacterByName","errorMessage","results","to","initialValues","charName","validationSchema","Yup","required","onSubmit","htmlFor","type","placeholder","component","selectedChar","Helmet","content","decoration","request","useCallback","url","method","body","headers","fetch","response","ok","status","json","useHttp","_apiBase","_apiKey","res","_transformCharacter","getAllComics","_transformComics","getComic","slice","path","extension","urls","title","pageCount","language","textObjects","price","prices"],"sourceRoot":""}